/*
문제
당신은 상범 빌딩에 갇히고 말았다. 여기서 탈출하는 가장 빠른 길은 무엇일까? 상범 빌딩은 각 변의 길이가 1인 정육면체(단위 정육면체)로 이루어져있다. 각 정육면체는 금으로 이루어져 있어 지나갈 수 없거나, 비어있어서 지나갈 수 있게 되어있다. 당신은 각 칸에서 인접한 6개의 칸(동,서,남,북,상,하)으로 1분의 시간을 들여 이동할 수 있다. 즉, 대각선으로 이동하는 것은 불가능하다. 그리고 상범 빌딩의 바깥면도 모두 금으로 막혀있어 출구를 통해서만 탈출할 수 있다.

당신은 상범 빌딩을 탈출할 수 있을까? 만약 그렇다면 얼마나 걸릴까?

입력
입력은 여러 개의 테스트 케이스로 이루어지며, 각 테스트 케이스는 세 개의 정수 L, R, C로 시작한다. L(1 ≤ L ≤ 30)은 상범 빌딩의 층 수이다. R(1 ≤ R ≤ 30)과 C(1 ≤ C ≤ 30)는 상범 빌딩의 한 층의 행과 열의 개수를 나타낸다.

그 다음 각 줄이 C개의 문자로 이루어진 R개의 행이 L번 주어진다. 각 문자는 상범 빌딩의 한 칸을 나타낸다. 금으로 막혀있어 지나갈 수 없는 칸은 '#'으로 표현되고, 비어있는 칸은 '.'으로 표현된다. 당신의 시작 지점은 'S'로 표현되고, 탈출할 수 있는 출구는 'E'로 표현된다. 각 층 사이에는 빈 줄이 있으며, 입력의 끝은 L, R, C가 모두 0으로 표현된다.

출력
각 빌딩에 대해 한 줄씩 답을 출력한다. 만약 당신이 탈출할 수 있다면 다음과 같이 출력한다.

Escaped in x minute(s).
여기서 x는 상범 빌딩을 탈출하는 데에 필요한 최단 시간이다.

만일 탈출이 불가능하다면, 다음과 같이 출력한다.
Trapped!
*/
#include<iostream>
#include<cstring>
#include<algorithm>
#include<queue>
using namespace std;
char map[31][31][31] = { 0, };
int ih[6] = { 0,0,0,0,-1,1 };
int ix[6] = { 1,-1,0,0,0,0 };
int iy[6] = { 0,0,-1,1,0,0 };
int l, r, c;
int  vi[31][31][31] = { 0, };
bool rng(int h, int x, int y)
{
	if (h < 0 || x < 0 || y < 0 || h >= l || x >= r || y >= c)
		return false;
	return true;
}
typedef struct pos {
	int h;
	int x;
	int y;
}p;
int bfs(int h, int x, int y)
{
	queue<p> q;
	p ef;
	int nh, nx, ny;
	int a, b, c;
	ef.h = h;
	ef.x = x;
	ef.y = y;
	vi[h][x][y] = 1;

	q.push(ef);
	while (!q.empty())
	{
		a = q.front().h;
		b = q.front().x;
		c = q.front().y;
		q.pop();
		if (map[a][b][c] == 'E')//도착 
		{
			return vi[a][b][c];
		}

		for (int i = 0; i < 6; i++)
		{
			nh = a + ih[i];
			nx = b + ix[i];
			ny = c + iy[i];

			if (rng(nh, nx, ny) && map[nh][nx][ny] != '#')
				if (vi[nh][nx][ny] == 0)
				{
					ef.h = nh;
					ef.x = nx;
					ef.y = ny;
					vi[nh][nx][ny] = vi[a][b][c] + 1;
					q.push(ef);
				}
		}
	}
	return 0;
}
int main()
{
	while (1)
	{
		cin >> l >> r >> c;

		if (l == 0 && r == 0 && c == 0)
			break;

		memset(vi, 0, sizeof(vi));

		int s[3] = { -1,-1,-1 };
		for (int i = 0; i < l; i++)
			for (int j = 0; j < r; j++)
			{
				cin >> map[i][j];
				if (s[0] == -1)
					for (int k = 0; k < c; k++)
						if (map[i][j][k] == 'S')//시작 
						{
							s[0] = i;
							s[1] = j;
							s[2] = k;
							vi[i][j][k] = 1;
						}
			}

		int ret = bfs(s[0], s[1], s[2]);

		if (ret == 0)
			cout << "Trapped!" << endl;
		else
		{
			cout << "Escaped in " << ret - 1 << " minute(s)." << endl;
		}
	}
	return 0;
}